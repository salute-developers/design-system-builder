openapi: 3.0.3
info:
  title: Design System Builder Admin API
  description: Administrative API for managing design systems, components, tokens, variations, and invariants
  version: 1.0.0
  contact:
    name: Design System Builder
    url: https://github.com/your-repo/ds-builder
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/admin-api
    description: Development server (Admin API)

paths:
  /admin-api/components:
    get:
      summary: Get all components (Admin)
      description: Retrieve a list of all components with full details for admin management
      tags:
        - Components
      responses:
        '200':
          description: Successfully retrieved components
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentDetailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new component (Admin)
      description: Create a new component with name and optional description
      tags:
        - Components
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComponentRequest'
      responses:
        '201':
          description: Component created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin-api/components/{id}:
    get:
      summary: Get component by ID (Admin)
      description: Retrieve a specific component by its ID with full details
      tags:
        - Components
      parameters:
        - name: id
          in: path
          required: true
          description: Component ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successfully retrieved component
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDetailed'
        '404':
          description: Component not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update component (Admin)
      description: Update an existing component's name and description
      tags:
        - Components
      parameters:
        - name: id
          in: path
          required: true
          description: Component ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComponentRequest'
      responses:
        '200':
          description: Component updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Component not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete component (Admin)
      description: Delete a component and all its related data
      tags:
        - Components
      parameters:
        - name: id
          in: path
          required: true
          description: Component ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Component deleted successfully
        '404':
          description: Component not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin-api/components/{id}/invariants:
    get:
      summary: Get component invariant token values (Admin)
      description: Retrieve all invariant token values for a specific component
      tags:
        - Invariants
      parameters:
        - name: id
          in: path
          required: true
          description: Component ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successfully retrieved invariant token values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvariantTokenValue'
        '404':
          description: Component not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add/update component invariant token values (Admin)
      description: Add or update invariant token values for a component. Tokens must belong to the component and not be assigned to variations.
      tags:
        - Invariants
      parameters:
        - name: id
          in: path
          required: true
          description: Component ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddInvariantTokenValuesRequest'
      responses:
        '200':
          description: Invariant token values added/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvariantTokenValuesResponse'
        '400':
          description: Bad request - validation error or business rule violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Component not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin-api/variations:
    get:
      summary: Get all variations (Admin)
      description: Retrieve a list of all variations
      tags:
        - Variations
      responses:
        '200':
          description: Successfully retrieved variations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variation'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new variation (Admin)
      description: Create a new variation for a component
      tags:
        - Variations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVariationRequest'
      responses:
        '201':
          description: Variation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variation'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin-api/variations/{id}:
    get:
      summary: Get variation by ID (Admin)
      description: Retrieve a specific variation by its ID
      tags:
        - Variations
      parameters:
        - name: id
          in: path
          required: true
          description: Variation ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successfully retrieved variation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variation'
        '404':
          description: Variation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update variation (Admin)
      description: Update an existing variation's name and description
      tags:
        - Variations
      parameters:
        - name: id
          in: path
          required: true
          description: Variation ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVariationRequest'
      responses:
        '200':
          description: Variation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variation'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Variation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete variation (Admin)
      description: Delete a variation and all its related data
      tags:
        - Variations
      parameters:
        - name: id
          in: path
          required: true
          description: Variation ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Variation deleted successfully
        '404':
          description: Variation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin-api/tokens:
    get:
      summary: Get all tokens (Admin)
      description: Retrieve a list of all tokens
      tags:
        - Tokens
      responses:
        '200':
          description: Successfully retrieved tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new token (Admin)
      description: Create a new token for a component
      tags:
        - Tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '201':
          description: Token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin-api/tokens/{id}:
    get:
      summary: Get token by ID (Admin)
      description: Retrieve a specific token by its ID
      tags:
        - Tokens
      parameters:
        - name: id
          in: path
          required: true
          description: Token ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successfully retrieved token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update token (Admin)
      description: Update an existing token's properties
      tags:
        - Tokens
      parameters:
        - name: id
          in: path
          required: true
          description: Token ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTokenRequest'
      responses:
        '200':
          description: Token updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete token (Admin)
      description: Delete a token and all its related data
      tags:
        - Tokens
      parameters:
        - name: id
          in: path
          required: true
          description: Token ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Token deleted successfully
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Component:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the component
          example: 1
        name:
          type: string
          description: Name of the component
          example: "Button"
        description:
          type: string
          nullable: true
          description: Optional description of the component
          example: "A reusable button component"
        createdAt:
          type: string
          format: date-time
          description: When the component was created
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: When the component was last updated
          example: "2024-01-01T12:00:00Z"
      required:
        - id
        - name
        - createdAt
        - updatedAt

    ComponentDetailed:
      allOf:
        - $ref: '#/components/schemas/Component'
        - type: object
          properties:
            variations:
              type: array
              items:
                $ref: '#/components/schemas/VariationDetailed'
            tokens:
              type: array
              items:
                $ref: '#/components/schemas/Token'
            propsAPI:
              type: array
              items:
                $ref: '#/components/schemas/PropsAPI'

    Variation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "view"
        description:
          type: string
          nullable: true
          example: "Visual appearance variation"
        componentId:
          type: integer
          format: int64
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

    VariationDetailed:
      allOf:
        - $ref: '#/components/schemas/Variation'
        - type: object
          properties:
            tokenVariations:
              type: array
              items:
                $ref: '#/components/schemas/TokenVariation'

    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "buttonColor"
        description:
          type: string
          nullable: true
          example: "Primary color for button component"
        type:
          type: string
          example: "color"
        defaultValue:
          type: string
          nullable: true
          example: "#007bff"
        componentId:
          type: integer
          format: int64
          example: 1
        xmlParam:
          type: string
          nullable: true
          example: "colorPrimary"
        composeParam:
          type: string
          nullable: true
          example: "primaryColor"
        iosParam:
          type: string
          nullable: true
          example: "primaryColor"
        webParam:
          type: string
          nullable: true
          example: "--button-primary-color"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

    TokenVariation:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Token'

    PropsAPI:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        componentId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "disabled"
        value:
          type: string
          example: "false"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

    CreateComponentRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the component
          example: "Button"
        description:
          type: string
          nullable: true
          description: Description of the component
          example: "A reusable button component"
        designSystemId:
          type: integer
          format: int64
          nullable: true
          description: Optional design system ID to associate with
          example: 1
      required:
        - name

    UpdateComponentRequest:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the component
          example: "Updated Button"
        description:
          type: string
          nullable: true
          description: Updated description of the component
          example: "An updated reusable button component"
      required:
        - name

    AddInvariantTokenValuesRequest:
      type: object
      properties:
        tokenValues:
          type: array
          description: Array of token values to add or update
          items:
            type: object
            properties:
              tokenId:
                type: integer
                format: int64
                description: ID of the token
                example: 1
              value:
                type: string
                description: Value for the token
                example: "#007bff"
            required:
              - tokenId
              - value
          minItems: 1
      required:
        - tokenValues

    InvariantTokenValue:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the token value
          example: 1
        tokenId:
          type: integer
          format: int64
          description: ID of the token
          example: 1
        value:
          type: string
          description: Value for the token
          example: "#007bff"
        type:
          type: string
          description: Type of token value (always 'invariant')
          example: "invariant"
        componentId:
          type: integer
          format: int64
          description: ID of the component
          example: 1
        createdAt:
          type: string
          format: date-time
          description: When the token value was created
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: When the token value was last updated
          example: "2024-01-01T12:00:00Z"
      required:
        - id
        - tokenId
        - value
        - type
        - componentId
        - createdAt
        - updatedAt

    InvariantTokenValuesResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Invariant token values added/updated successfully"
        updated:
          type: integer
          description: Number of token values updated
          example: 1
        created:
          type: integer
          description: Number of token values created
          example: 2
      required:
        - message
        - updated
        - created

    CreateVariationRequest:
      type: object
      properties:
        componentId:
          type: integer
          format: int64
          description: ID of the component
          example: 1
        name:
          type: string
          description: Name of the variation
          example: "primary"
        description:
          type: string
          nullable: true
          description: Optional description of the variation
          example: "Primary button style"
      required:
        - componentId
        - name

    UpdateVariationRequest:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the variation
          example: "updated-primary"
        description:
          type: string
          nullable: true
          description: Updated description of the variation
          example: "Updated primary button style"
      required:
        - name

    CreateTokenRequest:
      type: object
      properties:
        componentId:
          type: integer
          format: int64
          nullable: true
          description: ID of the component
          example: 1
        name:
          type: string
          description: Name of the token
          example: "buttonColor"
        type:
          type: string
          description: Type of the token
          example: "color"
        defaultValue:
          type: string
          nullable: true
          description: Default value for the token
          example: "#007bff"
        description:
          type: string
          nullable: true
          description: Optional description of the token
          example: "Primary color for button component"
        xmlParam:
          type: string
          nullable: true
          description: XML parameter name
          example: "colorPrimary"
        composeParam:
          type: string
          nullable: true
          description: Compose parameter name
          example: "primaryColor"
        iosParam:
          type: string
          nullable: true
          description: iOS parameter name
          example: "primaryColor"
        webParam:
          type: string
          nullable: true
          description: Web parameter name
          example: "--button-primary-color"
      required:
        - name
        - type

    UpdateTokenRequest:
      type: object
      properties:
        componentId:
          type: integer
          format: int64
          nullable: true
          description: ID of the component
          example: 1
        name:
          type: string
          description: Updated name of the token
          example: "updatedButtonColor"
        type:
          type: string
          description: Updated type of the token
          example: "color"
        defaultValue:
          type: string
          nullable: true
          description: Updated default value for the token
          example: "#0056b3"
        description:
          type: string
          nullable: true
          description: Updated description of the token
          example: "Updated primary color for button component"
        xmlParam:
          type: string
          nullable: true
          description: Updated XML parameter name
          example: "updatedColorPrimary"
        composeParam:
          type: string
          nullable: true
          description: Updated compose parameter name
          example: "updatedPrimaryColor"
        iosParam:
          type: string
          nullable: true
          description: Updated iOS parameter name
          example: "updatedPrimaryColor"
        webParam:
          type: string
          nullable: true
          description: Updated web parameter name
          example: "--updated-button-primary-color"
      required:
        - name
        - type

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Component not found"

    ValidationError:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Missing required fields"
        missingFields:
          type: array
          items:
            type: string
          description: List of missing required fields
          example: ["name", "componentId"]

tags:
  - name: Components
    description: Operations related to component management
  - name: Invariants
    description: Operations related to invariant token values
  - name: Variations
    description: Operations related to variation management
  - name: Tokens
    description: Operations related to token management